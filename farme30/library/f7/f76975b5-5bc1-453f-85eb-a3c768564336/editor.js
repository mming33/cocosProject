System.register(["cc"], function (_export, _context) {
  "use strict";

  var _cclegacy, isValid, MKEventDispatch, _crd;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  _export("default", void 0);

  return {
    setters: [function (_cc) {
      _cclegacy = _cc.cclegacy;
      isValid = _cc.isValid;
    }],
    execute: function () {
      _crd = true;

      _cclegacy._RF.push({}, "f7697W1W8FFP4Xro8doVkM2", "MKEventDispatch", _context.meta);

      //消息处理类
      _export("default", MKEventDispatch = class MKEventDispatch {
        constructor() {
          _defineProperty(this, "list", {});
        }

        //注册消息
        on(key, func, node) {
          if (this.list[key] == null) {
            this.list[key] = [];
          }

          let d = {};
          d.func = func;
          d.node = node;
          this.list[key].push(d);
        } //移除一个消息


        remove(key, node) {
          if (this.list[key]) {
            let data = this.list[key];

            for (let i = 0; i < data.length; i++) {
              if (data[i].node == node) {
                data.splice(i, 1);
                --i;
              }
            }
          }
        } //移除node所有消息


        removeByNode(node) {
          for (let p in this.list) {
            let data = this.list[p];

            for (let i = 0; i < data.length; i++) {
              if (data[i].node == node) {
                data.splice(i, 1);
                --i;
              }
            }
          }
        } //移除key注册的所以消息


        removeByKey(key) {
          delete this.list[key];
        } //遍历通知消息


        emit(key, arg = null) {
          // cc.log('遍历通知消息 key:::',key);
          //cc.log('遍历通知消息',this.list);
          if (this.list[key]) {
            let funcs = this.list[key].concat();

            for (let i = 0; i < funcs.length; i++) {
              if (funcs[i].node && isValid(funcs[i].node)) {
                funcs[i].func(arg, funcs[i].node);
              }
            }
          }
        }

        static get I() {
          if (!this.singleton) {
            this.singleton = new MKEventDispatch();
          }

          return this.singleton;
        }

      }); // window.MKEventDispatch = window.MKEventDispatch || MKEventDispatch;


      _defineProperty(MKEventDispatch, "nowShowLayer", {
        NONE: 0,
        HALL: 1,
        HALLQUIT: 2,
        GAMEQUIT: 3,
        TUTORIAL: 4,
        MATCH: 5,
        GAME: 6
      });

      _defineProperty(MKEventDispatch, "eventType", MKEventDispatch.nowShowLayer.NONE);

      _defineProperty(MKEventDispatch, "singleton", void 0);

      _cclegacy._RF.pop();

      _crd = false;
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvbWFjL0Rlc2t0b3AvTXlQcm9qZWN0L015Q29jb3MvZmFybWUzMC9hc3NldHMvU2NyaXB0cy9Db21tb24vVXRpbHMvTUtFdmVudERpc3BhdGNoLnRzIl0sIm5hbWVzIjpbIk1LRXZlbnREaXNwYXRjaCIsImlzVmFsaWQiLCJvbiIsImtleSIsImZ1bmMiLCJub2RlIiwibGlzdCIsImQiLCJwdXNoIiwicmVtb3ZlIiwiZGF0YSIsImkiLCJsZW5ndGgiLCJzcGxpY2UiLCJyZW1vdmVCeU5vZGUiLCJwIiwicmVtb3ZlQnlLZXkiLCJlbWl0IiwiYXJnIiwiZnVuY3MiLCJjb25jYXQiLCJJIiwic2luZ2xldG9uIiwiTk9ORSIsIkhBTEwiLCJIQUxMUVVJVCIsIkdBTUVRVUlUIiwiVFVUT1JJQUwiLCJNQVRDSCIsIkdBTUUiLCJub3dTaG93TGF5ZXIiXSwibWFwcGluZ3MiOiI7OzswQkFHcUJBLGU7Ozs7Ozs7OztBQUhaQyxNQUFBQSxPLE9BQUFBLE87Ozs7Ozs7QUFFVDt5QkFDcUJELGUsR0FBTixNQUFNQSxlQUFOLENBQXNCO0FBQUE7QUFBQSx3Q0FZdkIsRUFadUI7QUFBQTs7QUFhN0I7QUFDQUUsUUFBQUEsRUFBRSxDQUFDQyxHQUFELEVBQVNDLElBQVQsRUFBa0JDLElBQWxCLEVBQTRCO0FBQzFCLGNBQUcsS0FBS0MsSUFBTCxDQUFVSCxHQUFWLEtBQWtCLElBQXJCLEVBQTBCO0FBQ3RCLGlCQUFLRyxJQUFMLENBQVVILEdBQVYsSUFBZ0IsRUFBaEI7QUFDSDs7QUFDRCxjQUFJSSxDQUFLLEdBQUcsRUFBWjtBQUNBQSxVQUFBQSxDQUFDLENBQUNILElBQUYsR0FBUUEsSUFBUjtBQUNBRyxVQUFBQSxDQUFDLENBQUNGLElBQUYsR0FBU0EsSUFBVDtBQUNBLGVBQUtDLElBQUwsQ0FBVUgsR0FBVixFQUFlSyxJQUFmLENBQW9CRCxDQUFwQjtBQUNILFNBdEI0QixDQXVCN0I7OztBQUNBRSxRQUFBQSxNQUFNLENBQUNOLEdBQUQsRUFBU0UsSUFBVCxFQUFtQjtBQUNyQixjQUFHLEtBQUtDLElBQUwsQ0FBVUgsR0FBVixDQUFILEVBQWtCO0FBQ2QsZ0JBQUlPLElBQUksR0FBRyxLQUFLSixJQUFMLENBQVVILEdBQVYsQ0FBWDs7QUFDQSxpQkFBSSxJQUFJUSxDQUFDLEdBQUMsQ0FBVixFQUFhQSxDQUFDLEdBQUNELElBQUksQ0FBQ0UsTUFBcEIsRUFBMkJELENBQUMsRUFBNUIsRUFBK0I7QUFDM0Isa0JBQUdELElBQUksQ0FBQ0MsQ0FBRCxDQUFKLENBQVFOLElBQVIsSUFBZ0JBLElBQW5CLEVBQ0E7QUFDUUssZ0JBQUFBLElBQUksQ0FBQ0csTUFBTCxDQUFZRixDQUFaLEVBQWMsQ0FBZDtBQUNBLGtCQUFFQSxDQUFGO0FBQ1A7QUFDSjtBQUNKO0FBQ0osU0FuQzRCLENBb0M3Qjs7O0FBQ0FHLFFBQUFBLFlBQVksQ0FBQ1QsSUFBRCxFQUFXO0FBQ25CLGVBQU0sSUFBSVUsQ0FBVixJQUFlLEtBQUtULElBQXBCLEVBQTBCO0FBQ3RCLGdCQUFJSSxJQUFJLEdBQUcsS0FBS0osSUFBTCxDQUFVUyxDQUFWLENBQVg7O0FBQ0EsaUJBQUksSUFBSUosQ0FBQyxHQUFDLENBQVYsRUFBYUEsQ0FBQyxHQUFDRCxJQUFJLENBQUNFLE1BQXBCLEVBQTJCRCxDQUFDLEVBQTVCLEVBQStCO0FBQzNCLGtCQUFHRCxJQUFJLENBQUNDLENBQUQsQ0FBSixDQUFRTixJQUFSLElBQWdCQSxJQUFuQixFQUNBO0FBQ0lLLGdCQUFBQSxJQUFJLENBQUNHLE1BQUwsQ0FBWUYsQ0FBWixFQUFjLENBQWQ7QUFDQSxrQkFBRUEsQ0FBRjtBQUNIO0FBQ0o7QUFDSjtBQUNKLFNBaEQ0QixDQWlEN0I7OztBQUNBSyxRQUFBQSxXQUFXLENBQUNiLEdBQUQsRUFBVTtBQUNqQixpQkFBUSxLQUFLRyxJQUFMLENBQVVILEdBQVYsQ0FBUjtBQUNILFNBcEQ0QixDQXFEN0I7OztBQUNBYyxRQUFBQSxJQUFJLENBQUVkLEdBQUYsRUFBZWUsR0FBTyxHQUFHLElBQXpCLEVBQStCO0FBQy9CO0FBQ0E7QUFDQSxjQUFHLEtBQUtaLElBQUwsQ0FBVUgsR0FBVixDQUFILEVBQWtCO0FBQ2QsZ0JBQUlnQixLQUFLLEdBQUcsS0FBS2IsSUFBTCxDQUFVSCxHQUFWLEVBQWVpQixNQUFmLEVBQVo7O0FBQ0EsaUJBQUksSUFBSVQsQ0FBQyxHQUFDLENBQVYsRUFBWUEsQ0FBQyxHQUFDUSxLQUFLLENBQUNQLE1BQXBCLEVBQTJCRCxDQUFDLEVBQTVCLEVBQStCO0FBQzNCLGtCQUFJUSxLQUFLLENBQUNSLENBQUQsQ0FBTCxDQUFTTixJQUFULElBQWlCSixPQUFPLENBQUVrQixLQUFLLENBQUNSLENBQUQsQ0FBTCxDQUFTTixJQUFYLENBQTVCLEVBQThDO0FBQzFDYyxnQkFBQUEsS0FBSyxDQUFDUixDQUFELENBQUwsQ0FBU1AsSUFBVCxDQUFjYyxHQUFkLEVBQWtCQyxLQUFLLENBQUNSLENBQUQsQ0FBTCxDQUFTTixJQUEzQjtBQUNIO0FBQ0o7QUFDSjtBQUNKOztBQUdELG1CQUFrQmdCLENBQWxCLEdBQXNDO0FBQ2xDLGNBQUcsQ0FBQyxLQUFLQyxTQUFULEVBQW1CO0FBQ2YsaUJBQUtBLFNBQUwsR0FBaUIsSUFBSXRCLGVBQUosRUFBakI7QUFDSDs7QUFDRCxpQkFBTyxLQUFLc0IsU0FBWjtBQUNIOztBQXpFNEIsTyxHQTRFckM7OztzQkE1RXFCdEIsZSxrQkFFZ0I7QUFDekJ1QixRQUFBQSxJQUFJLEVBQUMsQ0FEb0I7QUFFekJDLFFBQUFBLElBQUksRUFBQyxDQUZvQjtBQUd6QkMsUUFBQUEsUUFBUSxFQUFDLENBSGdCO0FBSXpCQyxRQUFBQSxRQUFRLEVBQUMsQ0FKZ0I7QUFLekJDLFFBQUFBLFFBQVEsRUFBQyxDQUxnQjtBQU16QkMsUUFBQUEsS0FBSyxFQUFDLENBTm1CO0FBT3pCQyxRQUFBQSxJQUFJLEVBQUM7QUFQb0IsTzs7c0JBRmhCN0IsZSxlQVdhQSxlQUFlLENBQUM4QixZQUFoQixDQUE2QlAsSTs7c0JBWDFDdkIsZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWQgfSBmcm9tIFwiY2NcIjtcblxuLy/mtojmga/lpITnkIbnsbtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1LRXZlbnREaXNwYXRjaCB7XG4gICAgICAgIC8v55WM6Z2i57G75Z6LO1xuICAgICAgICBwdWJsaWMgc3RhdGljIG5vd1Nob3dMYXllciA9IHtcbiAgICAgICAgICAgIE5PTkU6MCxcbiAgICAgICAgICAgIEhBTEw6MSxcbiAgICAgICAgICAgIEhBTExRVUlUOjIsXG4gICAgICAgICAgICBHQU1FUVVJVDozLFxuICAgICAgICAgICAgVFVUT1JJQUw6NCxcbiAgICAgICAgICAgIE1BVENIOjUsXG4gICAgICAgICAgICBHQU1FOjZcbiAgICAgICAgfTtcbiAgICAgICAgcHVibGljIHN0YXRpYyBldmVudFR5cGUgPSBNS0V2ZW50RGlzcGF0Y2gubm93U2hvd0xheWVyLk5PTkU7XG4gICAgICAgIGxpc3QgPXt9O1xuICAgICAgICAvL+azqOWGjOa2iOaBr1xuICAgICAgICBvbihrZXk6YW55LGZ1bmM6YW55LG5vZGU6YW55KSB7XG4gICAgICAgICAgICBpZih0aGlzLmxpc3Rba2V5XSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3Rba2V5XSA9W107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZDphbnkgPSB7fTtcbiAgICAgICAgICAgIGQuZnVuYyA9ZnVuYztcbiAgICAgICAgICAgIGQubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB0aGlzLmxpc3Rba2V5XS5wdXNoKGQpO1xuICAgICAgICB9XG4gICAgICAgIC8v56e76Zmk5LiA5Liq5raI5oGvXG4gICAgICAgIHJlbW92ZShrZXk6YW55LG5vZGU6YW55KSB7XG4gICAgICAgICAgICBpZih0aGlzLmxpc3Rba2V5XSl7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmxpc3Rba2V5XTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDsgaTxkYXRhLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihkYXRhW2ldLm5vZGUgPT0gbm9kZSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3BsaWNlKGksMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8v56e76Zmkbm9kZeaJgOaciea2iOaBr1xuICAgICAgICByZW1vdmVCeU5vZGUobm9kZTphbnkpIHtcbiAgICAgICAgICAgIGZvciAoIGxldCBwIGluIHRoaXMubGlzdCApeyBcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHRoaXMubGlzdFtwXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDsgaTxkYXRhLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihkYXRhW2ldLm5vZGUgPT0gbm9kZSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zcGxpY2UoaSwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0taTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgIH1cbiAgICAgICAgLy/np7vpmaRrZXnms6jlhoznmoTmiYDku6Xmtojmga9cbiAgICAgICAgcmVtb3ZlQnlLZXkoa2V5OmFueSkge1xuICAgICAgICAgICAgZGVsZXRlICB0aGlzLmxpc3Rba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvL+mBjeWOhumAmuefpea2iOaBr1xuICAgICAgICBlbWl0IChrZXk6IHN0cmluZywgYXJnOmFueSA9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGNjLmxvZygn6YGN5Y6G6YCa55+l5raI5oGvIGtleTo6Oicsa2V5KTtcbiAgICAgICAgICAgIC8vY2MubG9nKCfpgY3ljobpgJrnn6Xmtojmga8nLHRoaXMubGlzdCk7XG4gICAgICAgICAgICBpZih0aGlzLmxpc3Rba2V5XSl7XG4gICAgICAgICAgICAgICAgbGV0IGZ1bmNzID0gdGhpcy5saXN0W2tleV0uY29uY2F0KCk7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxmdW5jcy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmNzW2ldLm5vZGUgJiYgaXNWYWxpZCAoZnVuY3NbaV0ubm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNzW2ldLmZ1bmMoYXJnLGZ1bmNzW2ldLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBzaW5nbGV0b246TUtFdmVudERpc3BhdGNoO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGdldCBJKCk6IE1LRXZlbnREaXNwYXRjaHtcbiAgICAgICAgICAgIGlmKCF0aGlzLnNpbmdsZXRvbil7XG4gICAgICAgICAgICAgICAgdGhpcy5zaW5nbGV0b24gPSBuZXcgTUtFdmVudERpc3BhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGV0b247XG4gICAgICAgIH1cbn1cblxuLy8gd2luZG93Lk1LRXZlbnREaXNwYXRjaCA9IHdpbmRvdy5NS0V2ZW50RGlzcGF0Y2ggfHwgTUtFdmVudERpc3BhdGNoO1xuXG4iXX0=